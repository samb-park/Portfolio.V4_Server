@page "/portfolio/project"
@using Server.Service.IService

@inject IProjectRepository _projectRepository
@inject NavigationManager _navigationManager
@inject ISnackbar _snackbar
@inject IDialogService DialogService
@inject IFileUpload _fileUpload

<MudBreadcrumbs Items="BreadcrumbItems"></MudBreadcrumbs>
<MudDivider Class="mb-7" DividerType="DividerType.Middle" Light="true"/>

<MudGrid Spacing="3">
    <MudItem xs="6" md="6" Class="d-flex justify-space-between">
        <MudText Typo="Typo.h4" Style="font-weight: bolder">@Title</MudText>
    </MudItem>
    <MudItem xs="6" md="6" Class="d-flex align-center justify-end">
        @if (SelectedProject != null)
        {
            <MudButton Link="@($"/portfolio/project/update/{SelectedProject.Id}")" Class="mr-2" Color="Color.Secondary" Variant="Variant.Outlined">EDIT</MudButton>
            <MudButton OnClick="HandleDelete" Class="mr-2" Color="Color.Secondary" Variant="Variant.Filled">DEL</MudButton>
        }
        <MudButton Link="/portfolio/project/create" Color="Color.Success" Variant="Variant.Filled">ADD</MudButton>
    </MudItem>
    <MudItem xs="12">
        <MudTabs Class="pa-5" Rounded="true" Outlined="true" Elevation="0" ApplyEffectsToContainer="true" PanelClass="mt-5" Centered="true">
            @foreach (var type in SD.ProjectTypes)
            {
                <MudTabPanel Text="@type">
                    <MudTable Items="@Projects" Hover=true Bordered=false Elevation="0" @bind-SelectedItem="SelectedProject">
                        <HeaderContent>
                            <MudTh>Title</MudTh>
                            <MudTh>Short Description</MudTh>
                            <MudTh>Featured</MudTh>
                            <MudTh>GithubUrl</MudTh>
                            <MudTh>ProjectUrl</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            @if (type == context.Type)
                            {
                                <MudTd DataLabel="Title">@context.Title</MudTd>
                                <MudTd DataLabel="Short Description">@context.ShortDescription</MudTd>
                                <MudTd DataLabel="Featured">@(context.Featured?"OK":"NULL")</MudTd>
                                <MudTd DataLabel="Featured">@(context.GithubUrl!=null?"OK":"NULL")</MudTd>
                                <MudTd DataLabel="Featured">@(context.ProjectUrl!=null?"OK":"NULL")</MudTd>
                            }
            
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager/>
                        </PagerContent>
                    </MudTable>
                </MudTabPanel>
            }
        </MudTabs>
    </MudItem>
</MudGrid>

@code {

    private string Title { get; set; } = "PROJECT";
    private IEnumerable<ProjectDTO> Projects { get; set; } = new List<ProjectDTO>();
    private ProjectDTO SelectedProject { get; set; } = null;
    
    private List<BreadcrumbItem> BreadcrumbItems { get; set; }= new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Portfolio", href: "/portfolio"),
        new BreadcrumbItem("Project", href: "/portfolio/project"),
    };

    protected override async Task OnInitializedAsync()
    {
        Projects = await _projectRepository.GetAllProjects();

        if (Projects.Count() == 0)
        {
            _navigationManager.NavigateTo("/portfolio/project/create",true);
        }
    }
    
    private async Task HandleDelete()
    {
        try
        {
            var dialog = DialogService.Show<DeleteConfirmation>("Delete Confirmation");
            var result = await dialog.Result;
            if (result.Cancelled)
            {
                _snackbar.Add("cancel", Severity.Error);
                return;
            }
            var deletedProject = await _projectRepository.DeleteProject(SelectedProject.Id);

            if (deletedProject != 0)
            {
                if (SelectedProject.ProjectImagesUrl != null)
                {
                    var imageName = SelectedProject.ProjectImagesUrl.Replace($"{_navigationManager.BaseUri}Images/", "");
                    _fileUpload.DeleteFile(imageName);
                }
                _snackbar.Add("Delete Success", Severity.Success);
                Projects = await _projectRepository.GetAllProjects();
                SelectedProject = null;
                return;
            }

            _snackbar.Add("Delete Failure", Severity.Error);
        }
        catch (Exception)
        {
            _snackbar.Add("Delete Failure", Severity.Error);
        }
    }

}